generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id      String  @id(map: "pk_address") @unique(map: "uq_adress_id") @db.VarChar(50)
  country String  @db.VarChar(15)
  state   String? @db.VarChar(15)
  city    String? @db.VarChar(30)

  user User[]

  @@map("adress")
}

model Badge {
  id          String @id(map: "pk_badge") @unique(map: "uq_badge_id") @db.VarChar(50)
  name        String @db.VarChar(15)
  type        String @db.VarChar(10)
  description String @db.VarChar(150)
  criteria    String @db.VarChar(50)
  icon        String @db.VarChar(30)

  userBadge UserBadge[]

  @@map("badge")
}

model DayPeriod {
  id        String  @id(map: "pk_day_period") @unique(map: "uq_day_period_id") @db.VarChar(50)
  night     Boolean @default(false)
  morning   Boolean @default(false)
  afternoon Boolean @default(false)

  preference Preference @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_preference_day_period")

  @@map("day_period")
}

model PlayersRange {
  id         String @id(map: "pk_players_range") @unique(map: "uq_players_range_id") @db.VarChar(50)
  minPlayers Int    @map("min_players")
  maxPlayers Int    @map("max_players")

  preference Preference @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_preference_players_range")

  @@map("players_range")
}

model GamePlace {
  id       String  @id(map: "pk_game_place") @unique(map: "uq_game_place_id") @db.VarChar(50)
  online   Boolean @default(false)
  inPerson Boolean @default(false) @map("in_person")

  preference Preference @relation(fields: [id], references: [id], onDelete: Cascade, map: "fk_preference_game_place")

  @@map("game_place")
}

model RpgStyle {
  id   String @id(map: "pk_rpg_style") @unique(map: "uq_rpg_style_id") @db.VarChar(50)
  name String @db.VarChar(35)

  preferenceRpgStyle PreferenceRpgStyle[]

  @@map("rpg_style")
}

model PreferenceRpgStyle {
  preferenceId String @map("preference_id") @db.VarChar(50)
  rpgStyleId   String @map("rpg_style_id") @db.VarChar(50)

  preference Preference @relation(fields: [preferenceId], references: [id], onDelete: Cascade, map: "fk_preference_preference_rpg_style")
  rpgStyle   RpgStyle   @relation(fields: [rpgStyleId], references: [id], onDelete: Cascade, map: "fk_rpg_style_preference_rpg_style")

  @@id([preferenceId, rpgStyleId], map: "pk_preference_rpg_style")
  @@unique([preferenceId, rpgStyleId], map: "uq_preference_rpg_style_preference_id_rpg_style_id")
  @@map("preference_rpg_style")
}

model Preference {
  id         String     @id(map: "pk_preference") @unique(map: "uq_preference_id") @db.VarChar(50)
  frequency  Frequency
  activeType ActiveType @map("active_type")

  dayPeriod          DayPeriod?
  playersRange       PlayersRange?
  gamePlace          GamePlace?
  preferenceRpgStyle PreferenceRpgStyle[]

  user User @relation(fields: [id], references: [id], onDelete: Cascade, map: "fk_user_preference")

  @@map("preference")
}

model SocialMedia {
  id   String @id(map: "pk_social_media") @unique(map: "uq_social_media_id") @db.VarChar(50)
  name String @db.VarChar(20)

  userSocialMedia UserSocialMedia[]

  @@map("social_media")
}

model User {
  id          String   @id(map: "pk_user") @unique(map: "uq_user_id") @db.VarChar(50)
  firstName   String   @map("first_name") @db.VarChar(25)
  lastName    String   @map("last_name") @db.VarChar(50)
  email       String   @unique(map: "uq_user_email") @db.VarChar(256)
  nickname    String?  @db.VarChar(25)
  phone       String?  @db.VarChar(20)
  addressId   String?  @map("address_id") @db.VarChar(50)
  dateOfBirth DateTime @map("date_of_birth") @db.Date

  preference      Preference?
  userConfig      UserConfig?
  userBadge       UserBadge[]
  userSocialMedia UserSocialMedia[]

  address Address? @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_user")

  @@map("user")
}

model UserBadge {
  userId  String @map("user_id") @db.VarChar(50)
  badgeId String @map("badge_id") @db.VarChar(50)

  badge Badge @relation(fields: [badgeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_badge_user_badge")
  user  User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_badge")

  @@id([userId, badgeId], map: "pk_user_badge")
  @@unique([userId, badgeId], map: "uq_user_badge_user_id_badge_id")
  @@map("user_badge")
}

model UserConfig {
  id           String   @id(map: "pk_user_config") @unique(map: "uq_user_config_id") @db.VarChar(50)
  allowMessage Boolean? @default(false) @map("allow_message")

  user User @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_config")

  @@map("user_config")
}

model UserSocialMedia {
  userId        String @map("user_id") @db.VarChar(50)
  socialMediaId String @map("social_media_id") @db.VarChar(20)
  link          String @db.VarChar(100)

  socialMedia SocialMedia @relation(fields: [socialMediaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_social_media_user_social_media")
  user        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_social_media")

  @@id([userId, socialMediaId], map: "pk_user_social_media")
  @@unique([userId, socialMediaId], map: "uq_user_social_media_user_id_social_media_id")
  @@map("user_social_media")
}

enum ActiveType {
  player
  gameMaster @map("game_master")

  @@map("active_tipe")
}

enum Frequency {
  daily
  weekly
  monthly

  @@map("frequency")
}
